<!DOCTYPE html>
<html>
<head>
    <title>Test Folder Report</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Thu Oct 30 2014 19:42:29 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Oct 30 2014 19:42:29 GMT-0700 (PDT)";
        var CHECKSUM = 74560488657;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

/*
 * A series of utilities to help construct trees
 * with data gotten bottom or middle-up
 * 
 */
 
Ext.define('Rally.technicalservices.util.TreeBuilding', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    /*
     * Given a hash of models (key = object id) that all know what
     * their parent is (based on the "parent" field -- note lowercase)
     * Return an array of models that are at the root level and
     * have a "children" field (note lowercase)
     * with appropriate items in an array 
     */
    constructRootItems:function(item_hash) {
        var root_array = [];
        Ext.Object.each(item_hash, function(oid,item){
            if ( !item.get('children') ) { item.set('children',[]); }
            var direct_parent = item.get('parent');
            if (!direct_parent && !Ext.Array.contains(root_array,item)) {
                root_array.push(item);
            } else {
                
                var parent_oid =  direct_parent.ObjectID || direct_parent.get('ObjectID');
                if (!item_hash[parent_oid]) {
                    this.logger.log("Saved parent missing: ", parent_oid);
                    if ( !Ext.Array.contains(root_array,item) ) {
                        root_array.push(item);
                    }
                } else {
                    var parent = item_hash[parent_oid];
                    if ( !parent.get('children') ) { parent.set('children',[]); }
                    var kids = parent.get('children');
                    kids.push(item);
                    parent.set('children',kids);
                }
            }
        },this);
        return root_array;
    },
    /*
     * Given a hash of hashes (key = object id) that all know what
     * their parent is (based on the "parent" field -- note lowercase)
     * Return an array of models that are at the root level and
     * have a "children" field (note lowercase)
     * with appropriate items in an array 
     */
    constructRootItemsFromHashes:function(item_hash) {
        var root_array = [];
        Ext.Object.each(item_hash, function(oid,item){
            if ( !item.children ) { item.children = []; }
            var direct_parent = item.parent;
            if (!direct_parent && !Ext.Array.contains(root_array,item)) {
                root_array.push(item);
            } else {
                
                var parent_oid =  direct_parent.ObjectID;
                if (!item_hash[parent_oid]) {
                    this.logger.log("Saved parent missing: ", parent_oid);
                    if ( !Ext.Array.contains(root_array,item) ) {
                        root_array.push(item);
                    }
                } else {
                    var parent = item_hash[parent_oid];
                    if ( !parent.children ) { parent.children = []; }
                    var kids = parent.children;
                    kids.push(item);
                    parent.children = kids;
                }
            }
        },this);
        return root_array;
    },
    /**
     * Given an array of models, turn them into hashes
     */
    convertModelsToHashes: function(model_array) {
        var hash_array = [];
        Ext.Array.each(model_array,function(model){
            if (this.isModel(model)) {
                var model_as_hash = model.data;
                model_as_hash.expanded = false;
                model_as_hash.leaf = false;
                
                // children & parent are fields that are not a 
                // part of the model def'n so getData doesn't provide them
                if ( model.get('children') ) {
                    model_as_hash.children = this.convertModelsToHashes(model.get('children'));
                }
                if ( model.get('parent') ) {
                    if ( this.isModel(model.get('parent') ) ) {
                        model_as_hash.parent = model.get('parent').getData();
                    } else {
                        model_as_hash.parent = model.get('parent');
                    }
                }

                if (!model_as_hash.children || model_as_hash.children.length === 0 ) {
                    model_as_hash.leaf = true;
                }
                
                hash_array.push(model_as_hash);
            } else {
                hash_array.push(model);
            }
        },this);
        return hash_array;
    },
    isModel: function(model){
        return model && ( model instanceof Ext.data.Model );
    },
    /**
     * Given an array of top-level models (will have field called 'children' holding more models),
     * roll up the value in the bottom of the tree's field_name
     * 
     * Config object has these values:
     * 
     * @param [{Ext.data.model}] root_items
     * @param {String} field_name
     * @param {Boolean} leaves_only (true to ignore parent value, false to add children to parent's existing value)
     * @param {String|fn} calculator [ 'count' ]
     */
    rollup: function(config){
        Ext.Array.each(config.root_items,function(root_item){
            this._setValueFromChildren(root_item,config.field_name,config.calculator,config.leaves_only);
        },this);
        return config.root_items;
    },
    _setValueFromChildren:function(parent_item,field_name,calculator,leaves_only){
        var parent_value = parent_item.get(field_name) || 0;
        if ( calculator ) {
            parent_value = this._calculate(parent_item,calculator);
        }
        var children = parent_item.get('children') || [];
        
        if ( leaves_only && children.length > 0 ) { parent_value = 0; }

        Ext.Array.each(children,function(child_item) {
            this._setValueFromChildren(child_item,field_name,calculator,leaves_only);
            var child_value = child_item.get(field_name) || 0;
            if ( calculator && child_value == 0 ) {
                child_value = this._calculate(child_item,calculator);
            }
            parent_value += child_value;
        },this);
        parent_item.set(field_name,parent_value);
        return;
    },
    _calculate:function(item,calculator){
        'use strict';
        if ( calculator == 'count' ) {
            return 1;
        }
        return calculator(item);
        
    },
    /**
     * Given an array of root items, find nodes in the tree where field_name contains field_value
     * and prune them
     * 
     * @param {} root_items
     * @param {} field_name
     * @param {} field_value
     * @return {}
     */
    pruneByFieldValue: function(root_items,field_name,field_value){
        Ext.Array.each(root_items,function(root_item){
            this._removeByFieldValue(root_items,root_item,field_name,field_value);
        },this);
        return root_items;
    },
    _removeByFieldValue: function(parent_array,parent_item,field_name,field_value){
        var tester = new RegExp(field_value);
        
        if ( parent_item ) {
            var value = parent_item.get(field_name) || "";
            if ( tester.test(value) ) {
                Ext.Array.remove(parent_array,parent_item);
            } else {
                var kids = parent_item.get('children') || [];
                if ( kids.length > 0 ) {
                    Ext.Array.each(kids, function(kid){
                        this._removeByFieldValue(kids,kid,field_name,field_value);
                    },this);
                }
            }
        }
    }
});
/*
 * Most of our trees are generated top-down, which
 * is most performant; however, sometimes we need to
 * point to a set of items in the middle of a tree and
 * (to apply scope or query) and then construct the
 * tree above and below the found items
 * 
 * A good example of this is wanting to see all
 * the PIs that have a story in a particular iteration
 * or in a particular team.  The PIs won't be assigned
 * to an iteration and might not be in the chosen project
 * scope, so first we have to find the iteration-tied stories
 * and then go up and down the tree to make context appear.
 * 
 * 
 */
 
 Ext.define('Rally.technicalservices.InsideOutTree', {
    extend: 'Ext.container.Container',
    alias: 'widget.insideouttree',
    requires: [ 'Rally.technicalservices.Logger', 'Rally.technicalservices.util.TreeBuilding'],
    logger: new Rally.technicalservices.Logger(),
    columns: [],
    cls: 'rally-grid',
    /**
     * @cfg {String} targetQuery
     * 
     * WSAPI query to be applied at the target level
     * 
     */
    targetQuery: '(ObjectID > 0)',
    /**
     * @cfg {String} targetType
     * 
     * Model type path that the query and scope will be applied to (and the tree built from)
     * 
     */
    targetType: 'HierarchicalRequirement',
    /**
     * 
     * @type Number targetChunk
     * 
     * When searching for parents of the target type, we pass along an array of
     * ObjectIDs (so it's not one call per item and we get fewer calls to the server), 
     * but the length of that get is limited.  Instead of calculating the best length,
     * we just define a number of OIDs to shove into the call
     */
    targetChunk: 70,
    /**
     * @cfg {Boolean} treeScopeDown
     * 
     * True to include searching for children and other descendants
     */
    treeScopeDown: true,
    /**
     * @cfg {Boolean} treeScopeUp
     * 
     * True to include searching for parents and other ancestors
     */
    treeScopeUp: true,

    pruneFieldName: null,
    pruneFieldValue: null,
    
    initComponent: function() {
        if ( this.columns.length == 0 ) { throw("Missing required setting: columns"); }
        
        this.callParent();
        this.addEvents(
            /**
             * @event aftertree
             * Fires when the tree has been created and placed on the page.
             * @param {Rally.technicalservices.InsideOutTree} this
             * @param {Ext.tree.Panel} tree
             */
            'aftertree',
            /**
             * @event afterloadtargets
             * Fires when data has been collected from the initial target query
             * @param {Rally.technicalservices.InsideOutTree} this
             */
            'afterloadtargets',
            /**
             * @event afterload
             * Fires when data has been collected from the parents and children
             * @param {Rally.technicalservices.InsideOutTree} this
             */
            'afterload'
         );
    },
    initItems: function() {
        this.callParent();
        this._fetchPortfolioNames().then({
            scope: this,
            success: function(pi_model_names){
                this.logger.log("Portfolio Item Names: ",pi_model_names);
                this._gatherData().then({
                    scope: this,
                    success:function(all_unordered_items){
                        this.fireEvent('afterload',this);

                        var ordered_items = Rally.technicalservices.util.TreeBuilding.constructRootItems(all_unordered_items);
                        
                        if ( this.pruneFieldName && this.pruneFieldValue ) {
                            ordered_items = Rally.technicalservices.util.TreeBuilding.pruneByFieldValue(ordered_items, this.pruneFieldName, this.pruneFieldValue);
                        }
                        
                        var calculated_items = this._doColumnCalculations(ordered_items);

                        var ordered_items_as_hashes = Rally.technicalservices.util.TreeBuilding.convertModelsToHashes(calculated_items);
                        
                        this._makeStoreAndShowGrid(ordered_items_as_hashes);
                    },
                    failure:function(error_msg){ 
                        this.fireEvent('aftertree',this);
                        this.add({xtype:'container',html:error_msg}); 
                    }
                });
            },
            failure: function(error_msg){
                this.fireEvent('aftertree',this);
                this.add({xtype:'container',html:error_msg}); 
            }
        });
    },
    _gatherData:function(){
        var deferred = Ext.create('Deft.Deferred');
        this._fetchTargetItems().then({
            scope: this,
            success:function(target_items){
                var fetched_items_by_oid = {};
                Ext.Array.each(target_items,function(item){
                    fetched_items_by_oid[item.get('ObjectID')] = item;
                });
                this.fireEvent('afterloadtargets',this);
                var promises = [];
                
                if ( this.treeScopeDown ) {
                    promises.push(this._fetchChildItems(target_items,fetched_items_by_oid));
                }
                
                if ( this.treeScopeUp ) {
                    promises.push(this._fetchParentItems(target_items,fetched_items_by_oid));
                }
                
                Deft.Promise.all(promises).then({
                    scope: this,
                    success: function(all_unordered_items){
                        var flattened_array = Ext.Array.flatten(all_unordered_items);
                        
                        var all_unordered_items_hash = {};
                        if ( flattened_array.length > 0 ) {
                            all_unordered_items_hash = flattened_array[0];
                        }
                        deferred.resolve(all_unordered_items_hash);
                    },
                    failure: function(error_msg) { deferred.reject(error_msg); }
                });
            },
            failure:function(error_msg){ deferred.reject(error_msg); }
        });
        return deferred;
    },
    // The target items are items at the starting level -- query and scope applies
    _fetchTargetItems: function(){
        var deferred = Ext.create('Deft.Deferred');

        var query = '( ObjectID > 0 )';
        
        if ( this.targetQuery ){
            query = this.targetQuery;
        }
        
        var filters = null;
        if ( query instanceof Rally.data.wsapi.Filter ) {
            filters = query;
        } else {
            try {
                var filters = Rally.data.wsapi.Filter.fromQueryString(query);
            } catch(e) {
                deferred.reject("Filter is poorly constructed");
            }
        }
        
        Ext.create('Rally.data.wsapi.Store', {
            autoLoad: true,
            model: this.targetType,
            fetch: this._getFetchNames(),
            filters:filters,
            limit:'Infinity',
            listeners:  {
                scope: this,
                load: function(store, records, success){
                    if (success) {
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Error loading ' + this.targetType + ' items');
                    }
               }
           }
        });
        return deferred.promise;
    },
    _fetchChildItems: function(parent_items,fetched_items, deferred){
        this.logger.log('_fetchChildItems',parent_items.length);
        if ( !deferred ) {
            deferred = Ext.create('Deft.Deferred');
        }
        
        var parent_oids = [];
        
        var promises = [];
        
        Ext.Object.each(parent_items,function(oid,parent){
            var type = parent.get('_type');
            var children_fields = this._getChildrenFieldsFor(type);
            
            if ( type == "testcase" ) {
                parent_oids.push(parent.get('ObjectID'));
            }
            
            if ( children_fields ) {
                Ext.Array.each(children_fields,function(children_field) {
                    promises.push(this._fetchCollection(parent,children_field));
                },this);
            }
        },this);
        
        if ( parent_oids.length > 0 ) {
            var number_of_oids = parent_oids.length;
            if (number_of_oids > 0 ) {
                for ( var i=0; i<number_of_oids; i+=this.targetChunk ) {
                    var chunk_array = parent_oids.slice(i,i+this.targetChunk);
                    promises.push(this._fetchByArrayOfValues('defect',chunk_array,"TestCase.ObjectID"));
                }
            }
            
        }
            
        if (promises.length > 0) {
            Deft.Promise.all(promises).then({
                scope: this,
                success: function(results) {
                    var children = Ext.Array.flatten(results);
                    Ext.Array.each(children,function(child){
                        if ( !fetched_items[child.get('ObjectID') ] ) {
                            var parent = this._getParentFrom(child);
                            fetched_items[child.get('ObjectID')] = child;
                        }
                    },this);
                    this._fetchChildItems(children,fetched_items,deferred);
                },
                failure: function(error_msg){ deferred.reject(error_msg); }
            });
        } else {
            this.logger.log("resolving _fetchChildItems");
            deferred.resolve(fetched_items);
        }
        return deferred.promise;
    },
    _fetchChildrenForParent:function(child_type,parent) {
        var connection_field = this._getAssociationFieldFor(child_type,parent.get('_type'));
        var filters = [{
            property:connection_field + ".ObjectID",
            value: parent.get('ObjectID')
        }];
        
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            autoLoad: true,
            model: child_type,
            fetch: this._getFetchNames(),
            filters: filters,
            context: {
                project: null
            },
            listeners:  {
                scope: this,
                load: function(store, records, success){
                    if (success) {
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Error loading ' + model_name + ' items');
                    }
               }
           }
        });
        return deferred.promise;
    },
    _fetchCollection: function(parent,children_field){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log("_fetchCollection",children_field);
        
        var fields_to_fetch = this._getFetchNames();
        
        if ( parent.get(children_field)){
            parent.getCollection(children_field,{
                autoLoad: true,
                fetch: fields_to_fetch,
                listeners: {
                    scope: this,
                    load: function(store,records,success){
                        if ( success ) {
                            deferred.resolve(records);
                        } else {
                            deferred.reject("Problem fetching collection ", children_field);
                        }
                    }
                }
            });
        } else {
            deferred.resolve([]);
        }
        return deferred.promise;
    },
    _fetchParentItems: function(child_items,fetched_items, deferred){
        if ( !deferred ) {
            deferred = Ext.create('Deft.Deferred');
        }
        this.logger.log('fetched_items:',fetched_items);
        var fetched_oids = Ext.Object.getKeys(fetched_items);
        
        var parents_by_type = {};
        
        Ext.Array.each(child_items,function(child){
            var parent = this._getParentFrom(child);
            if ( parent ) {
                var parent_type = parent._type;
                var parent_oid = parent.ObjectID;
                if ( !parents_by_type[parent_type] ) { parents_by_type[parent_type] = []; }
                // don't look for parents more than once
                if ( !Ext.Array.contains(parents_by_type[parent_type], parent_oid) ){
                    if ( !Ext.Array.contains(fetched_oids, parent_oid) ) {
                        parents_by_type[parent_type].push(parent_oid);
                    }
                }
            }
        },this);
        
        var promises = [];
        Ext.Object.each(parents_by_type,function(type,oids){
            var number_of_oids = oids.length;
            if (number_of_oids > 0 ) {
                for ( var i=0; i<number_of_oids; i+=this.targetChunk ) {
                    var chunk_array = oids.slice(i,i+this.targetChunk);
                    promises.push(this._fetchItemsByOIDArray(type,chunk_array));
                }
            }
        },this);
        
        if (promises.length > 0) {
            Deft.Promise.all(promises).then({
                scope: this,
                success: function(results) {
                    var parents = Ext.Array.flatten(results);
                    Ext.Array.each(parents,function(parent){
                        fetched_items[parent.get('ObjectID')] = parent;
                    });
                    this._fetchParentItems(parents,fetched_items,deferred);
                },
                failure: function(error_msg){ deferred.reject(error_msg); }
            });
        } else {
            deferred.resolve(fetched_items);
        }
        return deferred.promise;
    },
    _getAssociationFieldFor:function(child_type,parent_type){
        if ( child_type == "defect" ) {
            if ( parent_type == "testcase" ) {
                return "TestCase";
            }
            return 'Requirement';
        }
        return null;
    },
    _getParentFrom:function(child){
        var type = child.get('_type');
        if ( type == "hierarchicalrequirement" ) {
            var parent = child.get('Parent') || child.get('PortfolioItem');
            child.set('parent',parent);
            return parent;
        }
        
        if ( /portfolio/.test(type) ) {
            var parent = child.get("Parent");
            child.set('parent', parent);
            return parent;
        }
        
        if ( type == "task" ) {
            var parent = child.get("WorkProduct");
            child.set('parent', parent);
            return parent;
        }
        
        if ( type == "defect" ) {
            var parent = child.get("Requirement");
            if ( this.targetType == "TestFolder" || this.targetType == "TestCase") {
                parent = child.get('TestCase');
            }
            child.set('parent', parent);
            return parent;
        }
        
        if ( type == "testfolder" ) {
            var parent = child.get("Parent");
            child.set('parent', parent);
            return parent;
        }
        
        if ( type == "testcase" ) {
            var parent = child.get('TestFolder');
            child.set('parent',parent);
            return parent;
        }
        
        return null;
    },
    _getParentFieldsFor:function(type) {
        if ( type == "hierarchicalrequirement" ) {
            return ['Parent','PortfolioItem'];
        }
        
        if ( /portfolio/.test(type) ) {
            return ['Parent'];
        }
        
        if ( type == "task" ) {
            return ['WorkProduct'];
        }
        
        if ( type == "testfolder" ) {
            return ['Parent'];
        }
        
        if ( type == "testcase" ) {
            return ['TestFolder'];
        }
        
        if ( type == "defect" ) {
            return ['TestCase','Requirement'];
        }
        return null;
    },
    _getChildrenFieldsFor: function(type) {
        if ( type == "hierarchicalrequirement" ) {
            return ['Tasks','Defects','Children'];
        }
        if ( /portfolio/.test(type) ) {
            return ['Children','UserStories'];
        }
        
        if ( type == "task" ) {
            return [];
        }
        
        if ( type == "testfolder" ) {
            return ['Children','TestCases']
        }
        return null;
    },
    _getChildTypesFor: function(type){
        if ( type == "hierarchicalrequirement" ) {
            return ['HierarchicalRequirement','Task'];
        }
        if ( /portfolio/.test(type) ) {
            return ['HierarchicalRequirement','PortfolioItem'];
        }
        if ( type == "testfolder" ) {
            return ['TestFolder','TestCase']
        }
        return null;
    },
    _fetchByArrayOfValues:function(model_name,oids,field_name){
        this.logger.log("_fetchByArrayOfValues (", model_name, ",", oids.length, ",", field_name ,")");
        var deferred = Ext.create('Deft.Deferred');
        var filters = Ext.create('Rally.data.wsapi.Filter',{property:field_name,value:oids[0]});
        
        for ( var i=1;i<oids.length;i++ ) {
            filters = filters.or(Ext.create('Rally.data.wsapi.Filter',{
                property:field_name,
                value:oids[i]
            }));
        }
        
        Ext.create('Rally.data.wsapi.Store', {
            autoLoad: true,
            model: model_name,
            fetch: this._getFetchNames(),
            filters: filters,
            context: {
                project: null
            },
            listeners:  {
                scope: this,
                load: function(store, records, success){
                    if (success) {
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Error loading ' + model_name + ' items');
                    }
               }
           }
        });
        return deferred.promise;
    },
    _fetchItemsByOIDArray:function(model_name,oids){
        this.logger.log("_fetchItemsByOIDArray (", oids.length, ")");
        var deferred = Ext.create('Deft.Deferred');
        var filters = Ext.create('Rally.data.wsapi.Filter',{property:'ObjectID',value:oids[0]});
        
        for ( var i=1;i<oids.length;i++ ) {
            filters = filters.or(Ext.create('Rally.data.wsapi.Filter',{
                property:'ObjectID',
                value:oids[i]
            }));
        }
        
        Ext.create('Rally.data.wsapi.Store', {
            autoLoad: true,
            model: model_name,
            fetch: this._getFetchNames(),
            filters: filters,
            context: {
                project: null
            },
            listeners:  {
                scope: this,
                load: function(store, records, success){
                    if (success) {
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Error loading ' + model_name + ' items');
                    }
               }
           }
        });
        return deferred.promise;
    },
    _doColumnCalculations:function(ordered_items){
        var calculated_items = ordered_items;
        Ext.Array.each(this.columns,function(column){
            if ( column.calculator && column.dataIndex ) {
                calculated_items = Rally.technicalservices.util.TreeBuilding.rollup({
                    root_items: ordered_items,
                    field_name: column.dataIndex,
                    leaves_only: column.leaves_only,
                    calculator: column.calculator
                });
            }
        });
        return calculated_items;
    },

    _makeStoreAndShowGrid: function(ordered_items){
        this.logger.log('_makeStoreAndShowGrid',ordered_items);
        if ( ordered_items.length == 0 ) {
            this.add({
                xtype:'container',
                margin: 15,
                html: 'No data found'
            });
        } else {
            var model_config = {
                extend: 'TSTreeModel',
                fields: this._getFetchNames()
            };
            Ext.define('TSTreeModelWithAdditions', model_config);
            
            var tree_store = Ext.create('Ext.data.TreeStore',{
                model: TSTreeModelWithAdditions,
                root: {
                    expanded: false,
                    children: ordered_items
                }
            });
            
            var tree = this.add({
                xtype:'treepanel',
                store: tree_store,
                cls: 'rally-grid',
                rootVisible: false,
                enableColumnMove: true,
                sortableColumns: false,
                rowLines: true,
                height: this.height,
                columns: this.columns
            });
        }

        this.fireEvent('aftertree',this,tree);
    },
    _fetchPortfolioNames: function(){
        var deferred = Ext.create('Deft.Deferred');
        
        Ext.create('Rally.data.wsapi.Store', {
            autoLoad: true,
            model: 'TypeDefinition',
            sorters: [{
              property: 'Ordinal',
              direction: 'ASC'
            }],
            filters: [{
              property: 'Parent.Name',
              operator: '=',
              value: 'Portfolio Item'
            }, {
              property: 'Creatable',
              operator: '=',
              value: true
            }],
            listeners:  {
                scope: this,
                load: function(store, records, success){
                    if (success) {
                        var pi_model_names = _.map(records, function (rec) { return rec.get('TypePath'); });
                        deferred.resolve(pi_model_names);
                    } else {
                        deferred.reject('Error loading portofolio item names.');
                    }
               }
           }
        });
        return deferred.promise;
    },
    _getFetchNames: function() {
        var base_field_names = ['ObjectID','_type','Name'];
        var parent_field_names = ['Parent','PortfolioItem','Requirement','WorkProduct','TestFolder','TestCase'];
        var children_field_names = ['Children','Tasks','UserStories','TestCases'];
        
        var field_names = Ext.Array.merge(base_field_names,children_field_names);
        field_names = Ext.Array.merge(field_names,parent_field_names);
        
        Ext.Array.each(this.columns, function(column){
            field_names = Ext.Array.merge(field_names,[column.dataIndex]);
            if ( column.otherFields ) {
                field_names = Ext.Array.merge(field_names,column.otherFields);
            }
        });
        
        return field_names;
    }
});

Ext.define('TSTreeModel',{
    extend: 'Ext.data.Model',
    fields: [
        { name: 'FormattedID', type: 'String' },
        { name: 'Name', type:'String' },
        { name: '_ref', type:'String' },
        { name: '_type', type:'String' }
    ]
});
/* Blob.js
 * A Blob implementation.
 * 2014-05-31
 * 
 * By Eli Grey, http://eligrey.com
 * By Devin Samarin, https://github.com/eboyjr
 * License: X11/MIT
 *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md
 */

/*global self, unescape */
/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */

/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */

(function (view) {
	"use strict";

	view.URL = view.URL || view.webkitURL;

	if (view.Blob && view.URL) {
		try {
			new Blob;
			return;
		} catch (e) {}
	}

	// Internally we use a BlobBuilder implementation to base Blob off of
	// in order to support older browsers that only have BlobBuilder
	var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {
		var
			  get_class = function(object) {
				return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
			}
			, FakeBlobBuilder = function BlobBuilder() {
				this.data = [];
			}
			, FakeBlob = function Blob(data, type, encoding) {
				this.data = data;
				this.size = data.length;
				this.type = type;
				this.encoding = encoding;
			}
			, FBB_proto = FakeBlobBuilder.prototype
			, FB_proto = FakeBlob.prototype
			, FileReaderSync = view.FileReaderSync
			, FileException = function(type) {
				this.code = this[this.name = type];
			}
			, file_ex_codes = (
				  "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "
				+ "NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR"
			).split(" ")
			, file_ex_code = file_ex_codes.length
			, real_URL = view.URL || view.webkitURL || view
			, real_create_object_URL = real_URL.createObjectURL
			, real_revoke_object_URL = real_URL.revokeObjectURL
			, URL = real_URL
			, btoa = view.btoa
			, atob = view.atob
			
			, ArrayBuffer = view.ArrayBuffer
			, Uint8Array = view.Uint8Array
		;
		FakeBlob.fake = FB_proto.fake = true;
		while (file_ex_code--) {
			FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;
		}
		if (!real_URL.createObjectURL) {
			URL = view.URL = {};
		}
		URL.createObjectURL = function(blob) {
			var
				  type = blob.type
				, data_URI_header
			;
			if (type === null) {
				type = "application/octet-stream";
			}
			if (blob instanceof FakeBlob) {
				data_URI_header = "data:" + type;
				if (blob.encoding === "base64") {
					return data_URI_header + ";base64," + blob.data;
				} else if (blob.encoding === "URI") {
					return data_URI_header + "," + decodeURIComponent(blob.data);
				} if (btoa) {
					return data_URI_header + ";base64," + btoa(blob.data);
				} else {
					return data_URI_header + "," + encodeURIComponent(blob.data);
				}
			} else if (real_create_object_URL) {
				return real_create_object_URL.call(real_URL, blob);
			}
		};
		URL.revokeObjectURL = function(object_URL) {
			if (object_URL.substring(0, 5) !== "data:" && real_revoke_object_URL) {
				real_revoke_object_URL.call(real_URL, object_URL);
			}
		};
		FBB_proto.append = function(data/*, endings*/) {
			var bb = this.data;
			// decode data to a binary string
			if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
				var
					  str = ""
					, buf = new Uint8Array(data)
					, i = 0
					, buf_len = buf.length
				;
				for (; i < buf_len; i++) {
					str += String.fromCharCode(buf[i]);
				}
				bb.push(str);
			} else if (get_class(data) === "Blob" || get_class(data) === "File") {
				if (FileReaderSync) {
					var fr = new FileReaderSync;
					bb.push(fr.readAsBinaryString(data));
				} else {
					// async FileReader won't work as BlobBuilder is sync
					throw new FileException("NOT_READABLE_ERR");
				}
			} else if (data instanceof FakeBlob) {
				if (data.encoding === "base64" && atob) {
					bb.push(atob(data.data));
				} else if (data.encoding === "URI") {
					bb.push(decodeURIComponent(data.data));
				} else if (data.encoding === "raw") {
					bb.push(data.data);
				}
			} else {
				if (typeof data !== "string") {
					data += ""; // convert unsupported types to strings
				}
				// decode UTF-16 to binary string
				bb.push(unescape(encodeURIComponent(data)));
			}
		};
		FBB_proto.getBlob = function(type) {
			if (!arguments.length) {
				type = null;
			}
			return new FakeBlob(this.data.join(""), type, "raw");
		};
		FBB_proto.toString = function() {
			return "[object BlobBuilder]";
		};
		FB_proto.slice = function(start, end, type) {
			var args = arguments.length;
			if (args < 3) {
				type = null;
			}
			return new FakeBlob(
				  this.data.slice(start, args > 1 ? end : this.data.length)
				, type
				, this.encoding
			);
		};
		FB_proto.toString = function() {
			return "[object Blob]";
		};
		FB_proto.close = function() {
			this.size = 0;
			delete this.data;
		};
		return FakeBlobBuilder;
	}(view));

	view.Blob = function Blob(blobParts, options) {
		var type = options ? (options.type || "") : "";
		var builder = new BlobBuilder();
		if (blobParts) {
			for (var i = 0, len = blobParts.length; i < len; i++) {
				builder.append(blobParts[i]);
			}
		}
		return builder.getBlob(type);
	};
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this));
/* FileSaver.js
 *  A saveAs() FileSaver implementation.
 *  2014-05-27
 *
 *  By Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof navigator !== "undefined" &&
	    /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = !view.externalHost && "download" in save_link
		, click = function(node) {
			var event = doc.createEvent("MouseEvents");
			event.initMouseEvent(
				"click", true, false, view, 0, 0, 0, 0, 0
				, false, false, false, false, 0, null
			);
			node.dispatchEvent(event);
		}
		, webkit_req_fs = view.webkitRequestFileSystem
		, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		, fs_min_size = 0
		, deletion_queue = []
		, process_deletion_queue = function() {
			var i = deletion_queue.length;
			while (i--) {
				var file = deletion_queue[i];
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			}
			deletion_queue.length = 0; // clear queue
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, FileSaver = function(blob, name) {
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, blob_changed = false
				, object_url
				, target_view
				, get_object_url = function() {
					var object_url = get_URL().createObjectURL(blob);
					deletion_queue.push(object_url);
					return object_url;
				}
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					// don't create more object URLs than needed
					if (blob_changed || !object_url) {
						object_url = get_object_url(blob);
					}
					if (target_view) {
						target_view.location.href = object_url;
					} else {
						window.open(object_url, "_blank");
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
				}
				, abortable = function(func) {
					return function() {
						if (filesaver.readyState !== filesaver.DONE) {
							return func.apply(this, arguments);
						}
					};
				}
				, create_if_not_found = {create: true, exclusive: false}
				, slice
			;
			filesaver.readyState = filesaver.INIT;
			if (!name) {
				name = "download";
			}
			if (can_use_save_link) {
				object_url = get_object_url(blob);
				save_link.href = object_url;
				save_link.download = name;
				click(save_link);
				filesaver.readyState = filesaver.DONE;
				dispatch_all();
				return;
			}
			// Object and web filesystem URLs have a problem saving in Google Chrome when
			// viewed in a tab, so I force save with application/octet-stream
			// http://code.google.com/p/chromium/issues/detail?id=91158
			if (view.chrome && type && type !== force_saveable_type) {
				slice = blob.slice || blob.webkitSlice;
				blob = slice.call(blob, 0, blob.size, force_saveable_type);
				blob_changed = true;
			}
			// Since I can't be sure that the guessed media type will trigger a download
			// in WebKit, I append .download to the filename.
			// https://bugs.webkit.org/show_bug.cgi?id=65440
			if (webkit_req_fs && name !== "download") {
				name += ".download";
			}
			if (type === force_saveable_type || webkit_req_fs) {
				target_view = view;
			}
			if (!req_fs) {
				fs_error();
				return;
			}
			fs_min_size += blob.size;
			req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
				fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
					var save = function() {
						dir.getFile(name, create_if_not_found, abortable(function(file) {
							file.createWriter(abortable(function(writer) {
								writer.onwriteend = function(event) {
									target_view.location.href = file.toURL();
									deletion_queue.push(file);
									filesaver.readyState = filesaver.DONE;
									dispatch(filesaver, "writeend", event);
								};
								writer.onerror = function() {
									var error = writer.error;
									if (error.code !== error.ABORT_ERR) {
										fs_error();
									}
								};
								"writestart progress write abort".split(" ").forEach(function(event) {
									writer["on" + event] = filesaver["on" + event];
								});
								writer.write(blob);
								filesaver.abort = function() {
									writer.abort();
									filesaver.readyState = filesaver.DONE;
								};
								filesaver.readyState = filesaver.WRITING;
							}), fs_error);
						}), fs_error);
					};
					dir.getFile(name, {create: false}, abortable(function(file) {
						// delete file if it already exists
						file.remove();
						save();
					}), abortable(function(ex) {
						if (ex.code === ex.NOT_FOUND_ERR) {
							save();
						} else {
							fs_error();
						}
					}));
				}), fs_error);
			}), fs_error);
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name) {
			return new FileSaver(blob, name);
		}
	;
	FS_proto.abort = function() {
		var filesaver = this;
		filesaver.readyState = filesaver.DONE;
		dispatch(filesaver, "abort");
	};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	view.addEventListener("unload", process_deletion_queue, false);
	saveAs.unload = function() {
		process_deletion_queue();
		view.removeEventListener("unload", process_deletion_queue, false);
	};
	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'message_box'},
        {xtype:'container',itemId:'button_box',margin: 5},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this.start_folder_oid = this.getSetting('start_folder_oid');
        
        this.button = this.down('#button_box').add({
            xtype:'rallybutton',
            itemId:'save_button',
            text:'Save As CSV',
            disabled: true,
            scope: this,
            handler: function() {
                this._makeCSV();
            }
        });
        this.down('#button_box').add({
            xtype:'rallybutton',
            itemId:'pick_button',
            text:'Choose Folder',
            disabled: false,
            scope: this,
            handler: function() {
                this._pickFolder();
            }
        });

        this.onSettingsUpdate(this.getSettings());
    },
    _pickFolder: function() {
        Ext.create('Rally.ui.dialog.SolrArtifactChooserDialog', {
            artifactTypes: ['testfolder'],
            autoShow: true,
            height: 250,
            title: 'Choose Test Folder',
            listeners: {
                artifactchosen: function(dialog,selected_record){
                    var start_folder_oid = selected_record.get('ObjectID');
                    this.logger.log("Selected ", selected_record.get('Name'), " - ", start_folder_oid);
                    this._setTopFolder(start_folder_oid);
                },
                scope: this
            }
         });
    },
    _setTopFolder: function(start_folder_oid) {
        this.start_folder_oid = start_folder_oid;
        
        this.updateSettingsValues({
            scope: this,
            settings: {
                start_folder_oid: start_folder_oid
            },
            success: function() {
                this.onSettingsUpdate(this.getSettings());
            }
        });
    },
    _addTree: function(container){
        container.removeAll();
        this.logger.log("Start folder OID:", this.start_folder_oid);
        
        var target_query = "( ObjectID > 0 )";
        if ( this.start_folder_oid ) {
            target_query = '( ObjectID = "' + this.start_folder_oid + '" )';
        }
        container.add({
            xtype:'insideouttree',
//            targetType:'TestCase',
//            targetQuery: '( TestFolder != "" )',
            targetType:'TestFolder',
            targetQuery: target_query,
            targetChunk: 70,
            columns: this._getColumns(),
            pruneFieldName: 'Name',
            pruneFieldValue: 'Archive',
            listeners: {
                scope:this,
                afterrender:function(){
                    this.setLoading("Loading tree...");
                },
                afterloadtargets:function() {
                    this.setLoading('Finding relatives...');
                },
                afterload:function(){
                    this.setLoading('Building tree...');
                },
                aftertree:function(tree_container,tree){
                    this.tree = tree;
                    this.tree.on('selectionchange',this._setSelected,this);
                    this.setLoading(false);
                    this.button.setDisabled(false);
                }
            }
        });
    },
    _setSelected: function(tree,selected) {
        this.selected = selected[0];
    },
    _getAvailableTreeHeight: function() {
        var body = Ext.getBody();
        var height;
        if ( body ) { height = body.getHeight(); }
        
        var body_height = this.getHeight() || height;
        this.logger.log("Body height: ", body_height);
        var available_height = body_height - 100;
        this.logger.log("Returning height: ", available_height);
        return available_height;
    },
    _getColumns: function() {
        var me = this;
        var name_renderer = function(value,meta_data,record) {
            return me._nameRenderer(value,meta_data,record);
        };
        
        var magic_renderer = function(field,value,meta_data,record){
            return me._magicRenderer(field,value,meta_data,record);
        }
        
        var columns = [
            {
                xtype: 'treecolumn',
                text: 'Item',
                dataIndex: 'Name',
                itemId: 'tree_column',
                renderer: name_renderer,
                width: 400,
                menuDisabled: true,
                otherFields: ['FormattedID','ObjectID']
            }, 
            {
                text: '# TCs Total',
                dataIndex: '__count_total',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'testcase' ) {
                        return 1;
                    }
                    return 0;
                }
            },
            {
                text: '# TCs Executed',
                dataIndex: '__count_executed',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'testcase' && item.get('LastVerdict')) {
                        return 1;
                    }
                    return 0;
                },
                otherFields: ['LastVerdict']
            },
            {
                text: '# TCs Passed',
                dataIndex: '__count_passed',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'testcase' && item.get('LastVerdict')) {
                        if ( item.get('LastVerdict') == "Pass") {
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['LastVerdict']
            },
            {
                text: '# TCs Failed',
                dataIndex: '__count_failed',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'testcase' && item.get('LastVerdict')) {
                        if ( item.get('LastVerdict') == "Fail") {
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['LastVerdict']
            },
            {
                text: '# TCs Blocked',
                dataIndex: '__count_blocked',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'testcase' && item.get('LastVerdict')) {
                        if ( item.get('LastVerdict') == "Blocked") {
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['LastVerdict']
            },
            {
                text: 'Verdicts',
                dataIndex: 'LastVerdict'
            },
            {
                text: '# Defects Total',
                dataIndex: '__count_defects',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'defect' ) {
                        return 1;
                    }
                    return 0;
                }
            },
            {
                text: '# Defects Open',
                dataIndex: '__count_defects_open',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'defect' ) {
                        if (( item.get('State') == 'Submitted' ) || ( item.get('State') == 'Open' ) || ( item.get('State') == 'In Progress' )){
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['State']
            },
            {
                text: '# Defects Fixed',
                dataIndex: '__count_defects_fixed',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'defect' ) {
                        if ( item.get('State') == 'Fixed' ) {
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['State']
            },
            {
                text: '# Defects RFT',
                dataIndex: '__count_defects_rft',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'defect' ) {
                        if ( item.get('State') == 'Ready for Testing' ) {
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['State']
            },
            {
                text: '# Defects Closed',
                dataIndex: '__count_defects_closed',
                menuDisabled: true,
                leaves_only: true,
                calculator: function(item) {
                    if ( item.get('_type') == 'defect' ) {
                        if ( item.get('State') == 'Closed' ) {
                            return 1;
                        }
                    }
                    return 0;
                },
                otherFields: ['State']
            },
            {
                text: 'State',
                dataIndex: 'State'
            }
        ];
        
        return columns;
    },
    _nameRenderer: function(value,meta_data,record) {
        var display_value = record.get('Name');
        if ( record.get('FormattedID') ) {
            var link_text = Ext.util.Format.ellipsis(record.get('FormattedID') + ": " + value, 50, true);
            var url = Rally.nav.Manager.getDetailUrl( record );
            display_value = "<a target='_blank' href='" + url + "'>" + link_text + "</a>";
        }
        return display_value;
    },
    _magicRenderer: function(field,value,meta_data,record){
        var field_name = field.get('name');
        var record_type = record.get('_type');
        var model = this.models[record_type];
        // will fail fi field is not on the record
        // (e.g., we pick accepted date, by are also showing features
        try {
            var template = Rally.ui.renderer.RendererFactory.getRenderTemplate(model.getField(field_name)) || "";
            return template.apply(record.data);
        } catch(e) {
            return ".";
        }
    },
    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        
        var defectStore = Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            autoLoad: true,
            listeners: {
                load: function(store, records, successful) {
                    if (successful){
                        deferred.resolve(store);
                    } else {
                        deferred.reject('Failed to load store for model [' + model_name + '] and fields [' + model_fields.join(',') + ']');
                    }
                }
            }
        });
        return deferred.promise;
    },
    _makeCSV: function() {
        var file_name = "test_folder_report.csv";
        
        var file_content = [];
        var header_line = [];
        Ext.Array.each(this._getColumns(), function(field){
            header_line.push(field.text);
        });
        file_content.push(header_line.join(','));
        
        var store = this.tree.getStore();
        
        this.logger.log("tree store", store);
        var root = store.getRootNode();
        
        if ( this.selected ) { 
            root = this.selected;
        }
        
        this.logger.log('root',root);
        
        var csv = this._getCSVFromNode(root,this._getColumns());
        
        file_content.push(csv);
        
        var blob = new Blob([file_content.join("\r\n")],{type:'text/csv;charset=utf-8'});
        saveAs(blob,file_name);
    },
    _getCSVFromNode: function(node,columns){
        var csv = [];
        Ext.Array.each(columns,function(column){
            var index = column.dataIndex;
            csv.push(node.data[index]);
        });
        
        var csv_string = csv.join('","');
        var csv_string = '"' + csv_string + '"\r\n';

        Ext.Array.each(node.childNodes,function(child_node){
            csv_string += this._getCSVFromNode(child_node,columns);
        },this);
        return csv_string;
    },
    
    isExternal: function(){
      return typeof(this.getAppId()) == 'undefined';
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        //Build and save column settings...this means that we need to get the display names and multi-list
        this.logger.log('onSettingsUpdate',settings);
        
        var type = this.getSetting('type');
        this._addTree(this.down('#display_box'));
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Test Folder Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}

.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>